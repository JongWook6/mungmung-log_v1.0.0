# This workflow build and push a Docker container to Google Artifact Registry
# and deploy it on Cloud Run when a commit is pushed to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Developer (roles/run.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 3. Change the values in the "env" block to match your values.

name: 'Build and Deploy to Cloud Run'

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}' # 또는 WIF 방식

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      # --- Secret Manager에서 시크릿 가져오기 ---
      # 시크릿 이름을 정의하고, 해당 시크릿의 최신 버전을 가져옵니다.
      - name: 'Get secrets from Secret Manager'
        id: get_secrets
        uses: google-github-actions/get-secretmanager-secrets@v2
        with:
          secrets: |-
            JWT_SECRET: projects/${{ secrets.GCP_PROJECT }}/secrets/JWT_SECRET/versions/latest
            REDIS_SECRET: projects/${{ secrets.GCP_PROJECT }}/secrets/REDIS_SECRET/versions/latest
            POSTGRESQL_SECRET: projects/${{ secrets.GCP_PROJECT }}/secrets/POSTGRESQL_SECRET/versions/latest
            SPRING_MAIL_SECRET: projects/${{ secrets.GCP_PROJECT }}/secrets/SPRING_MAIL_SECRET/versions/latest
            GEMINI_SECRET: projects/${{ secrets.GCP_PROJECT }}/secrets/GEMINI_SECRET/versions/latest
            GOOGLE_CLIENT_ID: projects/${{ secrets.GCP_PROJECT }}/secrets/GOOGLE_CLIENT_ID/versions/latest
            GOOGLE_SECRET: projects/${{ secrets.GCP_PROJECT }}/secrets/GOOGLE_SECRET/versions/latest
            NAVER_CLIENT_ID: projects/${{ secrets.GCP_PROJECT }}/secrets/NAVER_CLIENT_ID/versions/latest
            NAVER_SECRET: projects/${{ secrets.GCP_PROJECT }}/secrets/NAVER_SECRET/versions/latest
            KAKAO_CLIENT_ID: projects/${{ secrets.GCP_PROJECT }}/secrets/KAKAO_CLIENT_ID/versions/latest
            KAKAO_SECRET: projects/${{ secrets.GCP_PROJECT }}/secrets/KAKAO_SECRET/versions/latest

      # BEGIN - Docker auth and build
      - name: 'Docker Auth'
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet

      - name: 'Build and Push Container'
        run: |
          IMAGE=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.GCP_REPOSITORY }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: 'Deploy to Cloud Run'
        run: |
          IMAGE=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.GCP_REPOSITORY }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
          gcloud run deploy ${{ secrets.SERVICE_NAME }} \
            --image $IMAGE \
            --platform managed \
            --region ${{ secrets.GCP_REGION }} \
            --allow-unauthenticated \
            --set-env-vars "JWT_SECRET=${{ steps.get_secrets.outputs.JWT_SECRET }},\
            REDIS_SECRET=${{ steps.get_secrets.outputs.REDIS_SECRET }},\
            POSTGRESQL_SECRET=${{ steps.get_secrets.outputs.POSTGRESQL_SECRET }},\
            SPRING_MAIL_SECRET=${{ steps.get_secrets.outputs.SPRING_MAIL_SECRET }},\
            GEMINI_SECRET=${{ steps.get_secrets.outputs.GEMINI_SECRET }},\
            GOOGLE_CLIENT_ID=${{ steps.get_secrets.outputs.GOOGLE_CLIENT_ID }},\
            GOOGLE_SECRET=${{ steps.get_secrets.outputs.GOOGLE_SECRET }},\
            NAVER_CLIENT_ID=${{ steps.get_secrets.outputs.NAVER_CLIENT_ID }},\
            NAVER_SECRET=${{ steps.get_secrets.outputs.NAVER_SECRET }},\
            KAKAO_CLIENT_ID=${{ steps.get_secrets.outputs.KAKAO_CLIENT_ID }},\
            KAKAO_SECRET=${{ steps.get_secrets.outputs.KAKAO_SECRET }}"

      # END - Docker auth and build

      - name: Show Cloud Run URL
        run: |
          gcloud run services describe ${{ secrets.SERVICE_NAME }} \
            --platform managed \
            --region ${{ secrets.GCP_REGION }} \
            --format="value(status.url)"
